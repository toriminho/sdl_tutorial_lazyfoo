https://lazyfoo.net/tutorials/SDL/index.php

lesson01
こんにちはSDL
このチュートリアルでは、SDLライブラリを設定し、最初のウィンドウを作成します。

lesson02
画面に画像を表示する
画像ファイルの読込み
フロントバッファとバックバッファ
バックバッファに全てブリットしてからupdateする
SDL_BlitSurface()などはバックバッファにレンダリングされる
SDL_UpdateWindowSurface()はフロントバッファをバックバッファで更新する

lesson03
イベントドリブンプログラミング
ここでは、ユーザーがウィンドウの外にXできるようにすることで、ユーザー入力の処理を開始します。
メインループ{
	イベントループ{
		イベントキューのイベントなくなるまでイベント取り出し
	}
	画面更新
}

lesson04
キーを押す
ここでは、キーボード入力の処理方法を学習します。

lesson05
最適化された表面荷重とソフトストレッチ
サーフェスをロードしてブリットする方法がわかったので、ブリットを高速化するときが来ました。
また、小さい画像を撮影し、画面に合わせて拡大します。

lesson06
拡張ライブラリと他の画像形式の読み込み
ここでは、SDL_image拡張ライブラリを使用してpng画像をロードします。

lesson07
テクスチャの読み込みとレンダリング
SDL 2.0の大きな新機能は、ハードウェアアクセラレーションによるテクスチャベースの2Dレンダリングです。
ここでは、テクスチャを使用してレンダリングするために画像をロードします。

lesson08
ジオメトリレンダリング
SDL 2.0のもう1つの新機能は、ハードウェアアクセラレーションによるプリミティブレンダリングです。
ここでは、これを使用していくつかの一般的な形状をレンダリングします。

lesson09
ビューポート
SDL 2.0では、ビューポートを使用して画面上のどこにレンダリングするかを制御することもできます。
ビューポートを使用して従属画面を作成します。

lesson10
カラーキーイング
ここでは、カラーキーイングを使用して、テクスチャに透明な背景を与えます。

lesson11
クリップレンダリングとスプライトシート
クリップレンダリングを使用すると、1つのテクスチャに複数の画像を保持し、必要な部分をレンダリングできます。これを使用して、スプライトシートから個々のスプライトをレンダリングします。

lesson12
色変調
カラーモジュレーションを使用して、レンダリングされたテクスチャの色を変更します。

lesson13
アルファブレンディング
ここでは、SDL2.0の新しいハードウェアアクセラレーションアルファブレンディングを使用します。

lesson14
アニメーションスプライトとVsync
ここでは、一連のスプライトを使用してそれらをアニメーション化します。

lesson15
回転と反転
ここでは、SDL2.0の新しいテクスチャの回転と反転を使用します。

lesson16
TrueTypeフォント
ここでは、SDL_ttfを使用してTrueTypeフォントからテキストをレンダリングします。

lesson17
マウスイベント
ここでは、マウスイベントを使用してマウス入力を読み取る方法を学習します。

lesson18
主要な州
イベントのポーリング以外に、キーを読み取る方法は他にもあります。ここでは、キーの状態を使用してキーボードの現在の状態を取得します。

lesson19
ゲームパッドとジョイスティック
ここでは、ゲームコントローラーからの入力を読み取る方法を学習します。

lesson20
フォースフィードバック
SDL 2.0のもう1つの新機能は、SDLハプティックスを使用したランブルサポートです。ボタンが押されると、コントローラーが鳴ります。

lesson21
効果音と音楽
ここでは、SDL_mixerを使用してSDLアプリに音楽とサウンドを追加します。

lesson22
タイミング
ここでは、SDLの時間機能を使用します。

lesson23
高度なタイマー
ここでは、SDL時間機能を拡張して、独自のカスタムタイマーを作成します。

lesson24
フレームレートの計算
ここでは、作成したタイマーを使用してフレームレートを測定します。

lesson25
キャッピングフレームレート
vsyncが使用できないときに一定のフレームレートが必要な場合は、フレームレートの上限をフォールバックとして使用できます。

lesson26
モーション
ここでは、入力のレンダリングと処理について学んだことを利用して、ドットを画面上で移動させます。

lesson27
衝突検出
ここでは、バウンディングボックスの衝突検出を使用して2つのオブジェクトを相互作用させます。

lesson28
ピクセルごとの衝突検出
ここでは、ピクセルごとの衝突検出を使用して2つのオブジェクトを衝突させます。

lesson29
円形衝突検出
ここでは、円やボックスとの衝突を検出する方法を学びます。

lesson30
スクロール
ここでは、画面よりも大きいレベルをスクロールするカメラを実装します。

lesson31
背景のスクロール
ここでは、スクロールする背景を使用して、無限のレベルの錯覚を与えます。

lesson32
テキスト入力とクリップボードの処理
ここでは、SDL2.0のテキスト入力を処理する新しい方法とその新しいクリップボード処理機能を使用します。

lesson33
ファイルの読み取りと書き込み
ここでは、SDLのRWOpsAPIを使用してバイナリファイルIOを実行します。

lesson34
オーディオ録音
SDL2.0.8はオーディオ録音をサポートしています。ここでは、オーディオデバイスからコピーして録音し、オーディオデバイスにコピーして再生します。

lesson35
ウィンドウイベント
ここでは、サイズ変更可能なウィンドウからイベントを処理します。

lesson36
複数のウィンドウ
SDLの新機能は、複数のウィンドウをサポートする機能です。ここでは、3つのウィンドウを持つアプリケーションを作成します。

lesson37
マルチディスプレイ
SDL 2.0のもう1つの新機能は、複数の物理ディスプレイを処理する機能です。ここでは、ウィンドウをディスプレイからディスプレイにジャンプさせます。

lesson38
粒子エンジン
ここでは、単純なパーティクルエフェクトを使用して、単純なトレイルエフェクトを作成します。

lesson39
タイリング
ここでは、タイリングエンジンを使用して簡単なレベルを作成します。

lesson40
テクスチャ操作
ここでは、テクスチャのピクセルに直接アクセスして操作します。

lesson41
ビットマップフォント
ここでは、ビットマップフォント手法を使用して、テクスチャをフォントとして使用します。

lesson42
テクスチャストリーミング
ここでは、テクスチャストリーミングを使用してストリーミングデータソースからレンダリングします。

lesson43
テクスチャにレンダリング
ここでは、シーンを取得してテクスチャにレンダリングします。

lesson44
フレームに依存しない動き
ここでは、現在のフレームレートに関係なくドットを移動させます。

lesson45
タイマーのコールバック
SDLには、タイマーコールバックと呼ばれる別のタイミングメカニズムがあります。ここでは、一定時間後に呼び出される関数を設定します。

lesson46
マルチスレッド
マルチスレッドを使用すると、プログラムで同時に処理を実行できます。ここでは、メインスレッドの外部からコンソールに出力するようにします。

lesson47
セマフォ
マルチスレッドアプリケーションの主な問題は、同じデータに同時にアクセスしようとしないようにする必要があることです。セマフォは、特定の量のスレッドのみが同時にアクションを実行していることを確認する方法です。

lesson48
アトミックオペレーション
アトミック操作は、スレッドを同期するもう1つの方法です。ここでは、アトミックカウンターを使用して前のチュートリアルをやり直します。

lesson49
ミューテックスと条件
ミューテックスと条件は、スレッドを同期するためのさらに別の方法です。ここでは、スレッドが相互に通信できるという追加の利点を使用します。

lesson50
SDLとOpenGL2
SDLは、OpenGLと組み合わせると強力なツールになります。OpenGLを使い始めたばかりの場合、または互換性を最大化したい場合は、OpenGL2.1でSDLを使用できます。このチュートリアルでは、最小限のOpenGL2.1プログラムを作成します。

lesson51
SDLと最新のOpenGL
SDL 2.0は、コンテキストコントロールを備えたOpenGL3.0 +をサポートするようになりました。ここでは、ミニマリストのOpenGL3 +コアプログラムを作成します。

lesson52
こんにちはモバイル
ここでは、最初のモバイルアプリで画像を読み込んで表示します。

lesson53
拡張機能と方向の変更
ここでは、SDL拡張ライブラリを使用して方向の変更を処理します。

lesson54
タッチ
ここでは、シングルタッチ入力を処理します。

lesson55
マルチタッチ
ここでは、ピンチや回転などのマルチタッチイベントを処理します。









